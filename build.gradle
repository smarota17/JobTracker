buildscript {
    repositories {
    	mavenCentral()
	    maven { setUrl("https://maven.vaadin.com/vaadin-prereleases") }
        maven { setUrl("https://maven.vaadin.com/vaadin-addons") }
    }
}


plugins {
	id 'org.springframework.boot' version '2.2.4.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id 'com.vaadin'
	id 'eclipse'
	id 'war'
}

defaultTasks("clean", "build")

group = 'com.group21'
version = '0.0.1'
sourceCompatibility = '11.0'

jar {
    baseName = 'jobtracker'
    version = '0.0.1'
}

repositories {
	mavenLocal()
	maven { setUrl("https://repo.maven.apache.org/maven2/") }
	maven { setUrl("https://maven.vaadin.com/vaadin-prereleases") }
	maven { setUrl("https://maven.vaadin.com/vaadin-addons") }
}

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}


dependencies {
	implementation 'com.vaadin:vaadin-core:23.1.3'
    implementation 'org.slf4j:slf4j-simple:1.7.36'
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'org.hibernate.validator:hibernate-validator:6.1.5.Final'
	implementation ('com.vaadin:vaadin-spring-boot-starter') {
		exclude module: "spring-boot-starter-logging"
	    exclude module: "logback-classic"
	}
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
    providedCompile 'javax.servlet:javax.servlet-api:4.0.1'
	testImplementation 'com.vaadin:vaadin-testbench:23.1.3'
    testImplementation 'io.github.bonigarcia:webdrivermanager:3.8.1'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

dependencyManagement {
	imports {
		mavenBom "com.vaadin:vaadin-bom:$vaadinVersion"
	}
}

test {
	useJUnitPlatform()
}

// The following pnpmEnable = true is not needed as pnpm is used by default,
// this is just an example of how to configure the Gradle Vaadin Plugin:
// for more configuration options please see: https://vaadin.com/docs/latest/guide/start/gradle/#all-options
vaadin {
	pnpmEnable = true
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task stage(type: Copy, dependsOn: [clean, build]) {
    from jar.archivePath
    into project.rootDir
    rename {
        'app.jar'
    }
}
stage.mustRunAfter(clean)

clean << {
    project.file('app.jar').delete()
}